blackmagick
    //
    public static NbtList getJson(ItemStack overrideItem, String path, String inpIndex, String key, String value) {
        return null;
    }

    //create json element from jsonList
    public static NbtString jsonFromList(ArrayList<ArrayList<String[]>> jsonList) {
        String json = "";
        if(jsonList.size()>0) {
            for(int i=0;i<jsonList.size();i++) {
                if(i>0)
                    json += ",{";
                for(int j=0; j<jsonList.get(i).size(); j++) {
                    if(j>0)
                        json+=",";
                    if(jsonList.get(i).get(j).length==2) {
                        json+= jsonList.get(i).get(j)[0]+jsonList.get(i).get(j)[1];
                    }
                    else if(jsonList.get(i).get(j).length==3) {
                        if(jsonList.get(i).get(j)[0].equals("\"clickEvent\"")) {
                            json+="\"clickEvent\":{\"action\":"+jsonList.get(i).get(j)[1]+",\"value\":"+jsonList.get(i).get(j)[2]+"}";
                        }
                        else if(jsonList.get(i).get(j)[0].equals("\"hoverEvent\"")) {
                            json+="\"hoverEvent\":{\"action\":"+jsonList.get(i).get(j)[1]+",\"contents\":"+jsonList.get(i).get(j)[2]+"}";
                        }
                        else
                            return null;
                    }
                    else
                        return null;
                }
                json+="}";
            }
        }
        if(jsonList.size()>1)
            json = "[" + json + "]";
        return NbtString.of(json);
    }



    //
    public static ArrayList<ArrayList<String[]>> getJsonList(ItemStack overrideItem, String path) {
        if(BlackMagick.getNbtFromPath(overrideItem,"0:/tag/"+path)!=null
        && BlackMagick.getNbtFromPath(overrideItem,"0:/tag/"+path).getType()==NbtType.STRING) {
            ArrayList<ArrayList<String[]>> jsonList = new ArrayList<>();
            String json = ((NbtString)BlackMagick.getNbtFromPath(overrideItem,"0:/tag/"+path)).asString();
            if(json.length()<2 || !(json.charAt(0)=='{' || json.charAt(0)=='[') || json.charAt(json.length()-1)!=json.charAt(0)) {
                return null;
            }
            else {
                if(json.charAt(0)=='[')
                    json = json.substring(1,json.length()-1);
                if(json.length()<2)
                    return null;
                while(json.length()>0 && json.charAt(0)=='{') {
                    if(json.length()>1)
                        json = json.substring(1);
                    else
                        return null;
                    int bracketCount = 1;
                    int quoteType = -1;//-1 for not in quotes, 0 for in double quotes, 1 for in single quotes
                    int nextBracket = -1;
                    FIND_CLOSE_BRACKET:
                    for(int i=0; i<json.length(); i++) {
                        if(quoteType==-1 && json.charAt(i)=='}')
                            bracketCount--;
                        else if(quoteType==-1 && json.charAt(i)=='{')
                            bracketCount++;
                        else if(quoteType==-1 && json.charAt(i)=='"')
                            quoteType=0;
                        else if(quoteType==0 && json.charAt(i)=='"')
                            quoteType=-1;
                        else if(quoteType==-1 && json.charAt(i)=='\'')
                            quoteType=1;
                        else if(quoteType==1 && json.charAt(i)=='\'')
                            quoteType=-1;
                        else if(quoteType!=-1 && json.charAt(i)=='\\') {
                            if(json.length()>i+1 && json.charAt(i+1)=='\\') {
                                if(json.length()>i+2 && json.charAt(i+2)=='\\') {
                                    if(json.length()>i+3 && json.charAt(i+3)=='\\')
                                        i=i+3;
                                    else
                                        return null;
                                }
                                else
                                    i=i+2;
                            }
                            else
                                return null;
                        }
                        else if(quoteType==-1 && json.charAt(i)=='\\')
                            return null;
                        if(bracketCount==0) {
                            nextBracket=i;
                            break FIND_CLOSE_BRACKET;
                        }
                    }
                    if(nextBracket==-1 || bracketCount!=0)
                        return null;
                    //jsonList.add(json.substring(0,nextBracket));
                    if(json.length()>nextBracket+2 && json.charAt(nextBracket+1)==',')
                        json = json.substring(nextBracket+2);
                    else
                        json = "";
                }
                if(jsonList.size()==0) {
                    return null;
                }
                return jsonList;
            }
        }
        else
            return null;
    }

itembuilder main
    //update json and txtJson from jsonList
    public static void updateJson() {
        json = "";
        if(jsonList.size()>1)
            json = json + "[";
        for(int i=0; i<jsonList.size(); i++) {
            if(i>0)
                json = json + ",";
            json = json + "{" + jsonList.get(i) + "}";
        }
        if(jsonList.size()>1)
            json = json + "]";
        tabDisplayTxtJson.setText(json);
    }

    //update jsonList from path
    public static void getJson(ItemStack overrideItem, String path) {
        if(BlackMagick.getNbtFromPath(overrideItem,"0:/tag/"+path)!=null
        && BlackMagick.getNbtFromPath(overrideItem,"0:/tag/"+path).getType()==NbtType.STRING) {
            List<String> newJsonList = new ArrayList<>();
            String newJson = ((NbtString)BlackMagick.getNbtFromPath(overrideItem,"0:/tag/"+path)).asString();
            if(newJson.length()>2 && newJson.charAt(0)=='{' && newJson.charAt(newJson.length()-1)=='}') {
                newJsonList.add(newJson.substring(1,newJson.length()-1));
                jsonList = newJsonList;
                updateJson();
            }
            else if(newJson.length()>4 && newJson.charAt(0)=='[' && newJson.charAt(newJson.length()-1)==']') {
                newJson = newJson.substring(1,newJson.length()-1);
                while(newJson.length()>0 && newJson.charAt(0)=='{') {
                    if(newJson.length()>1)
                        newJson = newJson.substring(1);
                    else
                        return;
                    int bracketCount = 1;
                    int quoteType = -1;//-1 for not in quotes, 0 for in double quotes, 1 for in single quotes
                    int nextBracket = -1;
                    FIND_CLOSE_BRACKET:
                    for(int i=0; i<newJson.length(); i++) {
                        if(quoteType==-1 && newJson.charAt(i)=='}')
                            bracketCount--;
                        else if(quoteType==-1 && newJson.charAt(i)=='{')
                            bracketCount++;
                        else if(quoteType==-1 && newJson.charAt(i)=='"')
                            quoteType=0;
                        else if(quoteType==0 && newJson.charAt(i)=='"')
                            quoteType=-1;
                        else if(quoteType==-1 && newJson.charAt(i)=='\'')
                            quoteType=1;
                        else if(quoteType==1 && newJson.charAt(i)=='\'')
                            quoteType=-1;
                        else if(quoteType!=-1 && newJson.charAt(i)=='\\') {
                            if(newJson.length()>i+1 && newJson.charAt(i+1)=='\\') {
                                if(newJson.length()>i+2 && newJson.charAt(i+2)=='\\') {
                                    if(newJson.length()>i+3 && newJson.charAt(i+3)=='\\')
                                        i=i+3;
                                    else
                                        return;
                                }
                                else
                                    i=i+2;
                            }
                            else
                                return;
                        }
                        else if(quoteType==-1 && newJson.charAt(i)=='\\')
                            return;
                        if(bracketCount==0) {
                            nextBracket=i;
                            break FIND_CLOSE_BRACKET;
                        }
                    }
                    if(nextBracket==-1 || bracketCount!=0)
                        return;
                    newJsonList.add(newJson.substring(0,nextBracket));
                    if(newJson.length()>nextBracket+2 && newJson.charAt(nextBracket+1)==',')
                        newJson = newJson.substring(nextBracket+2);
                    else
                        newJson = "";
                }
                if(newJsonList.size()>0) {
                    jsonList = newJsonList;
                    updateJson();
                }
            }
        }
    }

itembuilder object
        //tabDisplay
        WPlainPanel tabDisplayScroll = new WPlainPanel();
        WLabel tabDisplayLblBlank = new WLabel("");
        //
        WLabel tabDisplayLblJsonTitle = new WLabel("JSON");
        tabDisplayLblJsonTitle.setHorizontalAlignment(HorizontalAlignment.CENTER);
        //
        WTextField tabDisplayTxtJson = new WTextField();
        tabDisplayTxtJson.setMaxLength(2048);
        WLabel tabDisplayLblJson = new WLabel(new LiteralText("[?]")){
            public void addTooltip(TooltipBuilder tooltip) {
                /*
                updateJson();
                String jsonText = json;
                while(jsonText.length()>0) {
                    int endIndex = 54;
                    if(jsonText.length()<endIndex)
                        endIndex = jsonText.length();
                    tooltip.add(new LiteralText(jsonText.substring(0,endIndex)));
                    if(jsonText.length()>endIndex)
                        jsonText = jsonText.substring(endIndex);
                    else
                        jsonText = "";
                }
                */
            }
        };
        //
        WButton tabDisplayBtnGetJson = new WButton(new LiteralText("Copy"));
        WTextField tabDisplayTxtGetJson = new WTextField();
        tabDisplayTxtGetJson.setMaxLength(1024);
        tabDisplayBtnGetJson.setOnClick(() -> {
            /*
            getJson(null,tabDisplayTxtGetJson.getText());
            */
        });
        //
        WButton tabDisplayBtnJsonMode = new WButton(new LiteralText("[Set]"));
        tabDisplayBtnJsonMode.setOnClick(() -> {
            if(tabDisplayBtnJsonMode.getLabel().asString().equals("[Add]"))
                tabDisplayBtnJsonMode.setLabel(new LiteralText("[Set]"));
            else
                tabDisplayBtnJsonMode.setLabel(new LiteralText("[Add]"));
        });
        WTextField tabDisplayTxtJsonIndex = new WTextField();
        tabDisplayTxtJsonIndex.setMaxLength(3);
        //
        WButton tabDisplayBtnText = new WButton(new LiteralText("Text"));
        WTextField tabDisplayTxtText = new WTextField();
        tabDisplayTxtText.setMaxLength(1024);
        tabDisplayBtnText.setOnClick(() -> {
            /*
            CLICK:{
                if(tabDisplayBtnJsonMode.getLabel().asString().equals("[Set]")) {
                    int index = jsonList.size()-1;
                    if(index==-1)
                        index=0;
                    if(!tabDisplayTxtJsonIndex.getText().equals(""))
                        try{
                            index = Integer.parseInt(tabDisplayTxtJsonIndex.getText());
                            if(index<0)
                                break CLICK;
                        } catch(NumberFormatException e) {
                            break CLICK;
                        }
                    String inpText;
                    if(tabDisplayTxtText.getText().equals("")) {
                        if(index<jsonList.size())
                            jsonList.remove(index);
                        updateJson();
                        break CLICK;
                    }
                    inpText = tabDisplayTxtText.getText();
                    if(index<jsonList.size()) {
                        String current = jsonList.get(index);
                        int bracketCount = 0;
                        int quoteType = -1;//-1 for not in quotes, 0 for in double quotes, 1 for in single quotes
                        int startIndex = -1;
                        int endIndex = -1;
                        FIND_TEXT:
                            for(int i=0; i<current.length(); i++) {
                                if(quoteType==-1 && current.charAt(i)=='}')
                                    bracketCount--;
                                else if(quoteType==-1 && current.charAt(i)=='{')
                                    bracketCount++;
                                else if(quoteType==-1 && current.charAt(i)=='"') {
                                    if(bracketCount==0 && current.contains("\"text\":\"") && current.indexOf("\"text\":\"")==i) {
                                        startIndex=i;
                                        i=i+7;
                                    }
                                    quoteType=0;
                                }
                                else if(quoteType==0 && current.charAt(i)=='"') {
                                    if(startIndex!=-1) {
                                        endIndex=i;
                                        break FIND_TEXT;
                                    }
                                    quoteType=-1;
                                }
                                else if(quoteType==-1 && current.charAt(i)=='\'')
                                    quoteType=1;
                                else if(quoteType==1 && current.charAt(i)=='\'')
                                    quoteType=-1;
                                else if(quoteType!=-1 && current.charAt(i)=='\\') {
                                    if(current.length()>i+1 && current.charAt(i+1)=='\\') {
                                        if(current.length()>i+2 && current.charAt(i+2)=='\\') {
                                            if(current.length()>i+3 && current.charAt(i+3)=='\\')
                                                i=i+3;
                                            else
                                                break CLICK;
                                        }
                                        else
                                            i=i+2;
                                    }
                                    else
                                        break CLICK;
                                }
                                else if(quoteType==-1 && current.charAt(i)=='\\')
                                    return;
                            }
                        if(startIndex==-1 || endIndex==-1)
                            break CLICK;
                        String newJson = current.substring(0,startIndex)+"\"text\":\""+inpText+"\"";
                        if(current.length()>=endIndex+2)
                            newJson = newJson + current.substring(endIndex+1);
                        jsonList.set(index,newJson);
                        updateJson();
                    }
                    else if(index==0 && jsonList.size()==0) {
                        jsonList.add("\"text\":\""+inpText+"\"");
                        updateJson();
                    }
                }
                else {
                    int index = jsonList.size();
                    if(!tabDisplayTxtJsonIndex.getText().equals(""))
                        try{
                            index = Integer.parseInt(tabDisplayTxtJsonIndex.getText());
                            if(index<0)
                                break CLICK;
                        } catch(NumberFormatException e) {
                            break CLICK;
                        }
                    String inpText;
                    if(tabDisplayTxtText.getText().equals(""))
                        break CLICK;
                    inpText = tabDisplayTxtText.getText();
                    if(index>jsonList.size())
                        index=jsonList.size();
                    jsonList.add(index,"\"text\":\""+inpText+"\"");
                    updateJson();
                }
            }
            */
        });
        //
        //color
        //
        //booleans
        //
        //font
        //
        //click
        //
        //hover
        //
        //color maker (rgb input and show what it looks like)
        //
        //armor/maps and potion (button to set it to the current colormaker color)
        //
        tabDisplayScroll.add(tabDisplayLblJsonTitle,120,5+7,0,0);
        tabDisplayScroll.add(tabDisplayTxtJson,5+1,5+1+22,230-8-50-13-10+44,22);
        tabDisplayScroll.add(tabDisplayLblJson,50+20+230-8-50-13-10-20+5,5+1+22+6,13,7);
        tabDisplayScroll.add(tabDisplayBtnGetJson,5,5+1+22*2,60,20);
        tabDisplayScroll.add(tabDisplayTxtGetJson,50+20,5+1+22*2,230-8-50-13-10-20,22);
        tabDisplayScroll.add(tabDisplayBtnJsonMode,5,5+1+22*3,40,20);
        tabDisplayScroll.add(tabDisplayTxtJsonIndex,50,5+1+22*3,230-8-50-13-10,22);
        tabDisplayScroll.add(tabDisplayBtnText,5,5+1+22*4,40,20);
        tabDisplayScroll.add(tabDisplayTxtText,50,5+1+22*4,230-8-50-13-10,22);
        tabDisplayScroll.add(tabDisplayLblBlank,0,5+1+22*4,0,22+5+1-2);
        WScrollPanel tabDisplayScrollPanel = new WScrollPanel(tabDisplayScroll);
        tabDisplayScrollPanel.setScrollingHorizontally(TriState.FALSE);
        tabDisplayScrollPanel.setScrollingVertically(TriState.TRUE);
        tabDisplay.add(tabDisplayScrollPanel,5,5,12*20-10,9*22-30-30-10);

txt
|
jsonmaker
setdisplayname setbetname setentitytagname setpathtojson
setloreatline setpageatline (line entry, leave blank adds at end) +button switches insert/replace
if adding json to list at index higher than size, add {"text":""} to unclaimed indexes
all set buttons set their path to the live json but turned into a string
jsoneditor will have which {} in [] to edit, and if it should add or replace (or blank to add to end)
setpage will make book unresolved (maybe only if it needs to?)
for text, it gets one from text,translation,etc
incompatible items will follow same idea
|
(
    tooltip
|
colors
(1-0, a-whatever)
(klo etc) (reset?)
|
fonts
default, alt, uniform, illageralt
|
bold,italic,underlined,strikethrough,obfuscated
clickEvent action[]: open_url open_file run_command change_page copy_to_clipboard value[]
hoverEvent action[]: show_text show_item show_entity contents[]
text[]
color[]
font[]
frompath[path]
|
[]
setdisplayname, setbetname, setentityname, lore (add/set) [index], pages (add/set) [index]
)
|
easy copyname, copyblockname, copyentityname, copylore@i copypages@i
|
order: text,bold,italic,underlined,strikethrough,obfuscated,clickevent,hoverevent
|
change get/set to just edit path, and have buttons to quickly set path to name/betname/entname/lore(index)/pages(index)
|
set should be able to add new lines right?
|
maybe have all one [set/add] button with an [index], then have a submit button, which'll do all the inputs at once
and directly update the items json, without needing to get or set it. adding new {} in [] only works if text is present
(and set can add if index is after last item). somehow there'll need to be a way to insert the json in an existing lore/pages
without replacing. maybe have a button after the line with set/add and index in it, to specify adding/setting type. need some
way to differentiate between add/set for json and add/set for lore/pages.
|
list of list of string[2]
list of all the extra jsons, list of string arrays of length 2, where the first is the key, second is the value
keys should have \"\" around it and so should values that are jsonstrings
|
clickevent/hoverevent
either value {} without quotes or make the arrays actually lists where most are size 2 but these cases are size 3
so it has key, action, and value (or key/action/contents)
|
or key is clickevent:{action:... and value is ...}